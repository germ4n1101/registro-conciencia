import streamlit as st
import yaml
import os
import cohere
from datetime import datetime
from streamlit_cookies_manager import EncryptedCookieManager

# ==== Configuraci√≥n inicial ====
# Configuraci√≥n de cookies
cookies = EncryptedCookieManager(
    prefix="registro_conciencia/",
    password="clave-super-secreta"
)

if not cookies.ready():
    st.stop()

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Registro de Conciencia", page_icon="üßò")
st.title("üßò Registro de Conciencia")

# Directorio para guardar registros
REGISTROS_DIR = "registros"
os.makedirs(REGISTROS_DIR, exist_ok=True)

# Cargar clave Cohere desde secrets
try:
    cohere_api_key = st.secrets["cohere"]["api_key"]
    cohere_client = cohere.Client(cohere_api_key)
except KeyError:
    st.error("‚ùå No se encontr√≥ la clave API de Cohere en .streamlit/secrets.toml.")
    st.stop()

# ==== Funciones ====
def cargar_usuarios():
    if not os.path.exists("usuarios.yaml"):
        return {}
    with open("usuarios.yaml", "r") as file:
        return yaml.safe_load(file) or {}

def guardar_usuarios(usuarios):
    with open("usuarios.yaml", "w") as file:
        yaml.dump(usuarios, file)

def guardar_registro(email, entrada):
    filename = os.path.join(REGISTROS_DIR, f"{email.replace('@', '_')}.txt")
    with open(filename, "a", encoding="utf-8") as f:
        f.write(entrada + "\n" + "-" * 40 + "\n")

def obtener_registros(email):
    filename = os.path.join(REGISTROS_DIR, f"{email.replace('@', '_')}.txt")
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return f.read()
    return "A√∫n no tienes reflexiones registradas."

def generar_reflexion(prompt):
    if not prompt or prompt.strip() == "":
        return "No se puede generar una reflexi√≥n sin contenido."
    try:
        response = cohere_client.generate(
            model="command",
            prompt=prompt,
            max_tokens=100,
            temperature=0.7
        )
        return response.generations[0].text.strip()
    except cohere.CohereError as e:
        return f"Error al generar reflexi√≥n: {str(e)}"

# ==== Sesi√≥n persistente ====
if "usuario_autenticado" not in st.session_state:
    if cookies.get("usuario"):
        st.session_state.usuario_autenticado = cookies.get("usuario")

# ==== Autenticaci√≥n ====
usuarios = cargar_usuarios()

if "usuario_autenticado" not in st.session_state:
    opcion = st.radio("Elige una opci√≥n", ["Iniciar sesi√≥n", "Registrarse"])

    email = st.text_input("Correo electr√≥nico")
    password = st.text_input("Contrase√±a", type="password")

    if opcion == "Registrarse":
        if st.button("Crear cuenta"):
            if email in usuarios:
                st.error("‚ùå El usuario ya existe.")
            else:
                usuarios[email] = password
                guardar_usuarios(usuarios)
                cookies["usuario"] = email
                cookies.save()
                st.session_state.usuario_autenticado = email
                st.success("‚úÖ Usuario creado e ingresado correctamente.")
                st.experimental_rerun()

    elif opcion == "Iniciar sesi√≥n":
        if st.button("Ingresar"):
            if usuarios.get(email) == password:
                cookies["usuario"] = email
                cookies.save()
                st.session_state.usuario_autenticado = email
                st.success("‚úÖ Inicio de sesi√≥n exitoso. Puedes comenzar abajo.")
                st.experimental_rerun()
            else:
                st.error("‚ùå Usuario o contrase√±a incorrectos.")
else:
    email = st.session_state.usuario_autenticado
    st.markdown(f"üë§ Sesi√≥n iniciada como: **{email}**")

    if st.button("Cerrar sesi√≥n"):
        st.session_state.usuario_autenticado = None
        cookies["usuario"] = ""
        cookies.save()
        st.success("Sesi√≥n cerrada.")
        st.experimental_rerun()

    # ==== Preguntas de entrada ====
    st.markdown("Responde las siguientes preguntas para registrar tu estado y generar una reflexi√≥n.")

    estado_animo = st.text_input("1. ¬øC√≥mo te sientes hoy?")
    situacion = st.text_input("2. ¬øQu√© ha estado ocupando tus pensamientos √∫ltimamente?")
    agradecimiento = st.text_input("3. ¬øQu√© agradeces hoy?")
    meta = st.text_input("4. ¬øQu√© te gustar√≠a lograr o mejorar?")

    if st.button("Guardar y reflexionar"):
        if not any([estado_animo, situacion, agradecimiento, meta]):
            st.warning("Por favor responde al menos una pregunta.")
        else:
            fecha = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            entrada = f"""
Fecha: {fecha}
Estado de √°nimo: {estado_animo}
Situaci√≥n actual: {situacion}
Agradecimiento: {agradecimiento}
Meta: {meta}
"""
            guardar_registro(email, entrada)
            st.success("‚úÖ Entrada guardada y analizada por la IA.")

            prompt_ia = (
                f"Soy una persona reflexiva. Hoy escrib√≠:\n\n"
                f"Estado de √°nimo: {estado_animo}\n"
                f"Situaci√≥n actual: {situacion}\n"
                f"Agradecimiento: {agradecimiento}\n"
                f"Meta: {meta}\n\n"
                f"Por favor genera una reflexi√≥n amable, positiva y consciente basada en esta informaci√≥n."
            )

            respuesta = cohere_client.chat(
                model="command-nightly",
                message=prompt_ia
            )

            st.subheader("üß† Reflexi√≥n de German para ti")
            st.write(respuesta.text)

    # ==== Ver reflexiones anteriores ====
    st.markdown("---")
    st.subheader("üìú Tus reflexiones anteriores")
    st.text(obtener_registros(email))
